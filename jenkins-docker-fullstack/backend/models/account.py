# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
import backend.util as util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_id: str = None, balance: int = None):  # noqa: E501
        """Account - a model defined in Swagger

        :param account_id: The account_id of this Account.  # noqa: E501
        :type account_id: str
        :param balance: The balance of this Account.  # noqa: E501
        :type balance: int
        """
        self.swagger_types = {"account_id": str, "balance": int}

        self.attribute_map = {"account_id": "account_id", "balance": "balance"}
        self._account_id = account_id
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> "Account":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Account.


        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError(
                "Invalid value for `account_id`, must not be `None`"
            )  # noqa: E501

        self._account_id = account_id

    @property
    def balance(self) -> int:
        """Gets the balance of this Account.


        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance: int):
        """Sets the balance of this Account.


        :param balance: The balance of this Account.
        :type balance: int
        """
        if balance is None:
            raise ValueError(
                "Invalid value for `balance`, must not be `None`"
            )  # noqa: E501

        self._balance = balance
