def loginToDockerRegistry() {
    sh "docker login -u $REGISTRY_CREDENTIAL_USR -p $REGISTRY_CREDENTIAL_PSW"
}

def buildTagAndPushContainer(serviceName, imageName) {
    when {
        anyOf {
            changeset "$WORK_DIR/$serviceName/**"
            environment name: 'FORCE_BUILD', value: 'yes'
        }
    } 
    steps {
        loginToDockerRegistry()
        dockerImage = docker.build(
            "$REGISTRY/$imageName:$BUILD_NUMBER", 
            "$WORK_DIR/$serviceName"
        )
        dockerImage.push()
        dockerImage.push('latest')
    }
}

def deployContainer(serviceName) {
    when {
        anyOf {
            changeset "$WORK_DIR/$serviceName/**"
            environment name: 'FORCE_BUILD', value: 'yes'
        }
    }
    sh "docker compose -f $DOCKER_COMPOSE_FILE up -d $serviceName"
}

def checkContainerLogs(serviceName) {
    sh(
        returnStdout: true, 
        returnStatus: true, 
        script: "echo $ASTERISKS-$serviceName-logs-$ASTERISKS"
    )
    sh "docker logs jenkins-$serviceName || true"
}


pipeline {
    environment {
        WORK_DIR = "$WORKSPACE/jenkins-docker-fullstack"
        REGISTRY = 'sauravdwivedi'
        REGISTRY_CREDENTIAL = credentials('dockerhub_id')
        IMAGE_NAME_BACKEND = 'jenkins-docker-fullstack-backend'
        IMAGE_NAME_FRONTEND = 'jenkins-docker-fullstack-frontend'
        DOCKER_COMPOSE_FILE = 'jenkins-docker-fullstack/compose.yaml'
        FORCE_BUILD = 'no'
        ASTERISKS = '**************************************************'
    }
    agent any
    stages {
        stage('Build, tag and push backend container') {
            steps {
                buildTagAndPushContainer('backend', IMAGE_NAME_BACKEND)
            }
        }
        stage('Build, tag and push frontend container') {
            steps {
                buildTagAndPushContainer('frontend', IMAGE_NAME_FRONTEND)
            }
        }
        stage('Deploy backend container') {
            steps {
                deployContainer('backend')
            }
        }
        stage('Deploy frontend container') {
            steps {
                deployContainer('frontend')
            }
        }
        stage('Check backend container logs') {
            steps {
                checkContainerLogs('backend')
            }
        }
        stage('Check frontend container logs') {
            steps {
                checkContainerLogs('frontend')
            }
        }
    }
}