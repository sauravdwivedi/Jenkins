# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
import backend.util as util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        transaction_id: str = None,
        account_id: str = None,
        amount: int = None,
        created_at: datetime = None,
    ):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param transaction_id: The transaction_id of this Transaction.  # noqa: E501
        :type transaction_id: str
        :param account_id: The account_id of this Transaction.  # noqa: E501
        :type account_id: str
        :param amount: The amount of this Transaction.  # noqa: E501
        :type amount: int
        :param created_at: The created_at of this Transaction.  # noqa: E501
        :type created_at: datetime
        """
        self.swagger_types = {
            "transaction_id": str,
            "account_id": str,
            "amount": int,
            "created_at": datetime,
        }

        self.attribute_map = {
            "transaction_id": "transaction_id",
            "account_id": "account_id",
            "amount": "amount",
            "created_at": "created_at",
        }
        self._transaction_id = transaction_id
        self._account_id = account_id
        self._amount = amount
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> "Transaction":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this Transaction.


        :return: The transaction_id of this Transaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this Transaction.


        :param transaction_id: The transaction_id of this Transaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError(
                "Invalid value for `transaction_id`, must not be `None`"
            )  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Transaction.


        :return: The account_id of this Transaction.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Transaction.


        :param account_id: The account_id of this Transaction.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError(
                "Invalid value for `account_id`, must not be `None`"
            )  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self) -> int:
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: int
        """
        if amount is None:
            raise ValueError(
                "Invalid value for `amount`, must not be `None`"
            )  # noqa: E501

        self._amount = amount

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Transaction.


        :return: The created_at of this Transaction.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Transaction.


        :param created_at: The created_at of this Transaction.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError(
                "Invalid value for `created_at`, must not be `None`"
            )  # noqa: E501

        self._created_at = created_at
