node {
    def lib = load "./jenkins-k8s-fullstack/library.groovy"
}


pipeline {
    environment {
        WORK_DIR = "$WORKSPACE/jenkins-k8s-fullstack"
        REGISTRY = 'sauravdwivedi'
        REGISTRY_CREDENTIAL = credentials('dockerhub_id')
        IMAGE_NAME_BACKEND = 'jenkins-k8s-fullstack-backend'
        IMAGE_NAME_FRONTEND = 'jenkins-k8s-fullstack-frontend'
        DOCKER_COMPOSE_FILE = 'jenkins-k8s-fullstack/compose.yaml'
        FORCE_BUILD = 'no'
        ASTERISKS = '**************************************************'
    }
    agent any
    stages {
        stage ('Build, tag and push backend container') {
            when {
                anyOf {
                    changeset "$WORK_DIR/backend/**"
                    environment name: 'FORCE_BUILD', value: 'yes'
                }
            }
            steps {
                script{lib.buildTagAndPushContainer('backend', IMAGE_NAME_BACKEND)}
            }
        }
        stage('Build, tag and push frontend container') {
            when {
                anyOf {
                    changeset "$WORK_DIR/frontend/**"
                    environment name: 'FORCE_BUILD', value: 'yes'
                }
            } 
            steps {
                script{lib.buildTagAndPushContainer('frontend', IMAGE_NAME_FRONTEND)}
            }
        }
        stage('Deploy backend container') {
            when {
                anyOf {
                    changeset "$WORK_DIR/backend/**"
                    changeset "$WORK_DIR/k8s/**"
                    environment name: 'FORCE_BUILD', value: 'no'
                }
            }
            steps {
                def lib = load "./jenkins-k8s-fullstack/library.groovy"
                script{lib.deployContainer('backend')}
            }
        }
        stage('Deploy frontend container') {
            when {
                anyOf {
                    changeset "$WORK_DIR/frontend/**"
                    changeset "$WORK_DIR/k8s/**"
                    environment name: 'FORCE_BUILD', value: 'yes'
                }
            }
            steps {
                script{lib.deployContainer('frontend')}
            }
        }
        stage('Check backend container logs') {
            steps {
                script{lib.checkContainerLogs('backend')}
            }
        }
        stage('Check frontend container logs') {
            steps {
                script{lib.checkContainerLogs('frontend')}
            }
        }
    }
}