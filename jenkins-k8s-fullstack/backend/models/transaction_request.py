# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from backend.models.base_model_ import Model
import backend.util as util


class TransactionRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_id: str = None, amount: int = None):  # noqa: E501
        """TransactionRequest - a model defined in Swagger

        :param account_id: The account_id of this TransactionRequest.  # noqa: E501
        :type account_id: str
        :param amount: The amount of this TransactionRequest.  # noqa: E501
        :type amount: int
        """
        self.swagger_types = {"account_id": str, "amount": int}

        self.attribute_map = {"account_id": "account_id", "amount": "amount"}
        self._account_id = account_id
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt) -> "TransactionRequest":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TransactionRequest of this TransactionRequest.  # noqa: E501
        :rtype: TransactionRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this TransactionRequest.


        :return: The account_id of this TransactionRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this TransactionRequest.


        :param account_id: The account_id of this TransactionRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError(
                "Invalid value for `account_id`, must not be `None`"
            )  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self) -> int:
        """Gets the amount of this TransactionRequest.


        :return: The amount of this TransactionRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this TransactionRequest.


        :param amount: The amount of this TransactionRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError(
                "Invalid value for `amount`, must not be `None`"
            )  # noqa: E501

        self._amount = amount
